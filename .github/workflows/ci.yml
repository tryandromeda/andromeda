name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

env:
  CARGO_TERM_COLOR: always

jobs:
  spell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Spell check
        uses: crate-ci/typos@master
  lint:
    name: Lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        if: github.ref != 'refs/heads/main'
        with:
          prefix-key: "andromeda-${{ runner.os }}"
      - name: Install the rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.88.0
          targets: ${{ matrix.target }}
          components: rustfmt, clippy
      - name: Test
        run: cargo test
        timeout-minutes: 20
      - name: Check formatting
        run: cargo fmt --check
      - name: Clippy
        run: |
          cargo clippy --all-targets -- -D warnings
          cargo clippy --all-targets --all-features -- -D warnings
  wpt:
    name: Web Platform Tests
    runs-on: ubuntu-latest
    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache on ${{ github.ref_name }}
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: wpt
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - name: Checkout WPT submodule
        run: git submodule update --init --recursive
      - name: Build andromeda cli
        run: cargo build -p andromeda --release
      - name: Build WPT runner
        run: cargo build --bin wpt_test_runner --release
      - name: Run WPT tests
        run: cargo run --bin wpt --release
      - name: Generate test report
        if: always()
        run: cargo run --bin wpt_test_runner --release -- report --detailed
      - name: Validate test expectations
        if: always()
        run: cargo run --bin wpt_test_runner --release -- validate-expectations
